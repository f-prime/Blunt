@use 'sass:math';
@use 'sass:string';

$width-percent-max: 100;
$width-percent-number: 0;
$width-percent-decimal: 0;
$width-percent-decimal-inc: 5;

$width-max-px: 1000;
$width-increment-px: 1;
$width-start-px: 0;

@mixin widthPxGen($prefix, $val) {
  .#{$prefix}pxw-#{$val} { width: #{$val}px; }
  .#{$prefix}max-pxw-#{$val} { max-width: #{$val}px; }
  .#{$prefix}min-pxw-#{$val} { min-width: #{$val}px; }
}

@mixin widthPercentGen($prefix, $number, $decimal) {
  @if($decimal > 0 and $decimal < 10){
    .#{$prefix}w-#{$number}p#{$decimal} { width: string.unquote("#{$number}.#{$decimal}%"); }
    .#{$prefix}vw-#{$number}p#{$decimal} { width: string.unquote("#{$number}.#{$decimal}vw"); }
    .#{$prefix}min-w-#{$number}p#{$decimal} { min-width: string.unquote("#{$number}.#{$decimal}%"); }
    .#{$prefix}min-vw-#{$number}p#{$decimal} { min-width: string.unquote("#{$number}.#{$decimal}vw"); }
    .#{$prefix}max-w-#{$number}p#{$decimal} { max-width: string.unquote("#{$number}.#{$decimal}%"); }
    .#{$prefix}max-vw-#{$number}p#{$decimal} { max-width: string.unquote("#{$number}.#{$decimal}vw"); }
  } @else {
    .#{$prefix}w-#{$number} { width: string.unquote("#{$number}%"); }
    .#{$prefix}vw-#{$number} { width: string.unquote("#{$number}vw"); }
    .#{$prefix}min-w-#{$number} { min-width: string.unquote("#{$number}%"); }
    .#{$prefix}min-vw-#{$number} { min-width: string.unquote("#{$number}vw"); }
    .#{$prefix}max-w-#{$number} { max-width: string.unquote("#{$number}%"); }
    .#{$prefix}max-vw-#{$number} { max-width: string.unquote("#{$number}vw"); }
  }
}

@mixin widthPercent($prefix) {
  @while($width-percent-number <= $width-percent-max) {
    @include widthPercentGen($prefix, $width-percent-number, $width-percent-decimal);
    @while($width-percent-decimal < 10 and $width-percent-decimal-inc > 0) {
      $width-percent-decimal: $width-percent-decimal + $width-percent-decimal-inc;
      @if($width-percent-decimal != 10) {
        @include widthPercentGen($prefix, $width-percent-number, $width-percent-decimal);
      }
    }

    $width-percent-number: $width-percent-number + 1;
  }
}

@mixin widthPx($prefix) {
  @while($width-start-px <= $width-max-px) {
    @include widthPxGen($prefix, $width-start-px);
    $width-start-px: $width-start-px + $width-increment-px;
  }
}
